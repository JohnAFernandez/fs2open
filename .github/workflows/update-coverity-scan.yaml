name: Coverity for Freespace Open
# adapted from code by "albert-github" on the doxygen repository

# Since we're just testing for now
on: [push, pull_request]

# The right schedule
#on:
#  schedule:
#    we don't need more frequent than once a week.
#    - cron: '30 2 * * 1'  # Run once per a week on Monday early morning, to avoid Coverity's submission limits
#  workflow_dispatch:

env:
  QT_VERSION: 5.12.9
  coverity_token: ${{ secrets.COVERITY_TOKEN }}

jobs:
  build:
    name: Build FSO With Coverity Wrapper
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest MSVC Release",
              os: windows-2019,
              build_type: "Release",
              cc: "cl",
              cxx: "cl",
              build_gen: "NMake Makefiles",
            }
    steps:
      - name: install wget
        run: choco install wget --no-progress

      - name: Download Coverity
        run: |
          echo "token=${{ env.coverity_token }}&project=JohnAFernandez/fs2open"
          wget https://scan.coverity.com/download/cxx/win64 --post-data "token=${{ env.coverity_token }}&project=JohnAFernandez/fs2open" -O cov-analysis-win64-2022.12.zip

      - name: Decompress Coverity
        run: |
          echo "Before ..."
          dir /a
          mkdir cov-scan
          tar -xf cov-analysis-win64-2022.12.zip cov-scan
          echo "After ..."
          dir /a

      - name: Set up coverity environment variable
        run: echo "$(pwd)/cov-scan/bin" >> $GITHUB_PATH
      - name: Install libiconv
        uses: suisei-cn/actions-download-file@v1
        with:
          url: "https://github.com/pffang/libiconv-for-Windows/releases/download/v1.16/libiconv-for-Windows_1.16.7z"
          target: .

      - name: Setup VS Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@master

      # despite having the same evironment as the main respository, this is not working....
      #- name: Prepare Vulkan SDK
      #  uses: humbletim/setup-vulkan-sdk@v1.2.0
      #  with:
      #    vulkan-query-version: 1.3.204.0
      #    vulkan-components: Vulkan-Headers, Vulkan-Loader
      #    vulkan-use-cache: true
      # workaround for failing download of prebuilt libs in 20231016.1.0 runner
      # https://github.com/actions/runner-images/issues/8598
      - name: Remove Strawberry Perl from PATH
        run: |
          $env:PATH = $env:PATH -replace "C:\\Strawberry\\c\\bin;", ""
          "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true # `true` to checkout submodules, `recursive` to recursively checkout submodules

      - name: Refresh Env
        run: |
          Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
          refreshenv

      - name: Configure CMake
        env:
          shell: bash
        run: |
          mkdir build
          cmake -B ./build -S . CMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX="$(pwd)/install" -DFSO_USE_SPEECH="ON" -DFSO_USE_VOICEREC="ON" -DMSVC_SIMD_INSTRUCTIONS="AVX" -DFSO_BUILD_QTFRED=OFF -DFSO_BUILD_TESTS=ON -DFSO_INSTALL_DEBUG_FILES="ON" -A "x64" -DFSO_BUILD_WITH_VULKAN="OFF" -G "Visual Studio 16 2019" -T "v142"

      - name: Build/scan doxygen
        working-directory: ./build
        shell: bash
        run: |
          cov-build --dir cov-int cmake --build . --config "$CONFIGURATION" --target INSTALL -- /verbosity:minimal
          ls -alR "$(pwd)/install"

      # don't submit during test just create tar file
      - name: Compress Results
        run: tar -czf fso-coverity.tgz cov-int
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with: ${{ github.workspace }}/fso-coverity.tgz

        ##       curl --form token=$TOKEN \
        ##         --form email=$EMAIL \
        ##         --form file=@doxygen.tgz \
        ##         --form version="$(git rev-parse HEAD)" \
        ##         --form description="Automatic GHA scan" \
        ##         'https://scan.coverity.com/builds?project=doxygen'
        env:
          TOKEN: ${{ secrets.COVERITY_TOKEN }}
          EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
