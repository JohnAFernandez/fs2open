name: Coverity for Freespace Open
# adapted from code by "albert-github" on the doxygen repository
# many thanks!

# Since we're just testing for now
on: [push, pull_request]

# The right schedule
#on:
#  schedule:
#    we don't need more frequent than once a week.
#    - cron: '30 2 * * 1'  # Run once per a week on Monday morning, to avoid Coverity's submission limits
#  workflow_dispatch:

env:
  QT_VERSION: 5.12.9
  coverity_token: ${{ secrets.COVERITY_TOKEN }}

jobs:
  build:
    name: Build FSO With Coverity Wrapper
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "GCC on ubuntu", os: ubuntu-latest, build_type: "Release" }
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get install libopenal-dev
          sudo apt-get install -y libudev-dev
          sudo apt-get install doxygen
          sudo apt install graphviz
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true # `true` to checkout submodules, `recursive` to recursively checkout submodules

      - name: Download Coverity
        run: |
          wget -q https://scan.coverity.com/download/cxx/linux64 --post-data "token=${{ env.coverity_token }}&project=JohnAFernandez/fs2open" -O coverity_tool.tgz
          mkdir cov-scan

      - name: Decompress Coverity
        run: |
          tar ax -f coverity_tool.tgz --strip-components=1 -C cov-scan

      - name: Setup Environment
        run: |
          echo "$(pwd)/cov-scan/bin" >> $GITHUB_PATH
          echo "NPROC=$(getconf _NPROCESSORS_ONLN)" >> $GITHUB_ENV

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Configure CMake for FSO
        env:
          CONFIGURATION: Release
          compiler: gcc-5
        run: $GITHUB_WORKSPACE/ci/linux/configure_cmake.sh

      - name: Build/scan doxygen
        working-directory: ./build
        env:
          CONFIGURATION: Release
        run: cov-build --dir cov-int LD_LIBRARY_PATH=$Qt5_DIR/lib:$LD_LIBRARY_PATH ninja -k 20 all

      - name: Build/scan doxygen
        run: |
          dir cov-analysis-win64-2022.12.2\bin\
          cd cov-analysis-win64-2022.12.2\bin\
          dir
          cov-build.exe --dir cov-int cmake --build D:\a\fs2open\fs2open\ --config "$CONFIGURATION" --target INSTALL
          ls -alR "$(pwd)\install"
        #env:
        #  PATH_TO_COV: /cov-analysis-win64-2022.12.2/bin/cov-build.exe

      - name: Compress Results
        run: tar -czf fso-coverity.tgz cov-int
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with: ${{ github.workspace }}/fso-coverity.tgz

        # Comment this out when testing to keep from running into liits
        ##       curl --form token=$TOKEN \
        ##         --form email=$EMAIL \
        ##         --form file=@doxygen.tgz \
        ##         --form version="$(git rev-parse HEAD)" \
        ##         --form description="Automatic GHA scan" \
        ##         'https://scan.coverity.com/builds?project=doxygen'
        #env:
        #  TOKEN: ${{ secrets.COVERITY_TOKEN }}
        #  EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
